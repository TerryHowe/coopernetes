---
- name: Check if apt-key command exists
  command: which apt-key
  register: apt_key_exists
  changed_when: False
  failed_when: False

- name: Add apt signing key (using apt_key if available)
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.25/deb/Release.key
    state: present
  become: yes
  when: apt_key_exists.rc == 0

- name: Create keyrings directory (if apt-key not available)
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: yes
  when: apt_key_exists.rc != 0

- name: Add Kubernetes GPG key manually (if apt-key not available)
  shell: |
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.25/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    chmod a+r /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  become: yes
  when: apt_key_exists.rc != 0

- name: Create /etc/apt/sources.list.d/kubernetes.list (with keyring if apt-key not available)
  copy:
    content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.25/deb/ /\n"
    dest: /etc/apt/sources.list.d/kubernetes.list
    owner: root
    group: root
    mode: '0644'
  become: yes
  when: apt_key_exists.rc != 0

- name: Create /etc/apt/sources.list.d/kubernetes.list (without keyring if apt-key available)
  copy:
    src: kubernetes.list
    dest: /etc/apt/sources.list.d/kubernetes.list
    owner: root
    group: root
    mode: '0644'
  become: yes
  when: apt_key_exists.rc == 0

- name: Update repositories
  apt:
    update_cache: yes
  become: yes

- name: Check available Kubernetes versions
  shell: apt-cache madison kubeadm | head -5
  register: available_versions
  changed_when: False
  failed_when: False

- name: Display available versions for debugging
  debug:
    msg: "Available kubeadm versions: {{ available_versions.stdout_lines }}"
  when: available_versions.stdout_lines is defined

- name: Install Kubernetes packages
  apt:
    name:
      - kubeadm={{ k8s_version }}
      - kubectl={{ k8s_version }}
      - kubelet={{ k8s_version }}
    state: present
  become: yes
  register: k8s_install_result
  ignore_errors: yes

- name: Show error if installation failed
  debug:
    msg: |
      Failed to install Kubernetes {{ k8s_version }}.
      Available versions: {{ available_versions.stdout_lines }}
      Please update k8s_version in defaults/main.yml or pass -e k8s_version=X.X.X-X.X
  when: k8s_install_result is failed

- name: Fail if Kubernetes installation failed
  fail:
    msg: "Kubernetes installation failed. Check available versions above."
  when: k8s_install_result is failed

- name: Hold Kubernetes packages at current version
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  become: yes
  loop:
    - kubeadm
    - kubectl
    - kubelet
