---
- name: Check for kernel args
  shell: cat /boot/cmdline.txt | grep -c '{{kernel_args}}' || true
  register: cmdline_grep
  changed_when: False

- name: Add /boot/cmdline.txt kernel args
  replace:
    path: /boot/cmdline.txt
    regexp: '^(.+)$'
    replace: '\1 {{kernel_args}}'
  become: yes
  register: kernel_args
  when: cmdline_grep.stdout == "0"

- name: Check swap settings
  command: swapon --show
  become: yes
  register: swapon
  changed_when: False

- name: Check if dphys-swapfile exists
  command: which dphys-swapfile
  register: dphys_swapfile_check
  changed_when: False
  failed_when: False

- name: Turn off swap if needed (using dphys-swapfile)
  block:
    - name: Turn swap off
      command: dphys-swapfile swapoff
      become: yes

    - name: Stop swap service
      systemd:
        name: dphys-swapfile
        state: stopped
        enabled: no
      become: yes

    - name: Remove swap file
      command: dphys-swapfile uninstall
      args:
        removes: /var/swap
      become: yes

    - name: Remove dphys-swapfile
      apt:
        name: dphys-swapfile
        state: absent
        purge: yes
      become: yes
  when: swapon.stdout != "" and dphys_swapfile_check.rc == 0

- name: Turn off swap if needed (generic method)
  block:
    - name: Disable all swap
      command: swapoff -a
      become: yes

    - name: Remove swap entries from /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^[^#].*\s+swap\s+'
        state: absent
      become: yes

    - name: Disable zram-swap service if present
      systemd:
        name: zram-swap
        state: stopped
        enabled: no
      become: yes
      failed_when: False

    - name: Remove common swap files
      file:
        path: "{{ item }}"
        state: absent
      become: yes
      loop:
        - /var/swap
        - /swap
        - /swapfile
      failed_when: False
  when: swapon.stdout != "" and dphys_swapfile_check.rc != 0

- name: Reboot if needed
  ansible.builtin.include_tasks:
    file: reboot.yml
  when: kernel_args is changed or swapon.stdout != ""

- name: Check that the crictl executable exists
  stat:
    path: /usr/bin/crictl
  register: crictl_executable

- name: Install containerd if needed
  block:
    - name: Install prerequisites for Docker repository
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present
        update_cache: yes
      become: yes

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      become: yes

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg
      become: yes

    - name: Get OS codename
      shell: . /etc/os-release && echo "$VERSION_CODENAME"
      register: os_codename
      changed_when: False

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=arm64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian {{ os_codename.stdout }} stable"
        state: present
        filename: docker
      become: yes

    - name: Install containerd.io
      apt:
        name: containerd.io
        state: present
        update_cache: yes
      become: yes

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
      become: yes

    - name: Generate default containerd config
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml
      become: yes

    - name: Configure containerd to use systemd cgroup driver
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup\s*='
        line: '            SystemdCgroup = true'
        insertafter: '^\s*\[plugins\."io\.containerd\.grpc\.v1\.cri"\.containerd\.runtimes\.runc\.options\]'
      become: yes
      register: containerd_config

    - name: Restart containerd if config changed
      systemd:
        name: containerd
        state: restarted
        enabled: yes
      become: yes
      when: containerd_config is changed

    - name: Ensure containerd is running
      systemd:
        name: containerd
        state: started
        enabled: yes
      become: yes
  when: not crictl_executable.stat.exists

- name: Add root group to pi for containerd
  user:
    name: pi
    groups: root
    append: yes
  become: yes
